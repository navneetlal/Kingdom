// <auto-generated />
using System;
using KingdomApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace KingdomApi.Migrations
{
    [DbContext(typeof(KingdomContext))]
    [Migration("20210615071336_EnumToString")]
    partial class EnumToString
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ClanNobleman", b =>
                {
                    b.Property<long>("ClansClanId")
                        .HasColumnType("bigint")
                        .HasColumnName("clans_clan_id");

                    b.Property<long>("NoblemenNoblemanId")
                        .HasColumnType("bigint")
                        .HasColumnName("noblemen_nobleman_id");

                    b.HasKey("ClansClanId", "NoblemenNoblemanId")
                        .HasName("pk_clan_nobleman");

                    b.HasIndex("NoblemenNoblemanId")
                        .HasDatabaseName("ix_clan_nobleman_noblemen_nobleman_id");

                    b.ToTable("clan_nobleman");
                });

            modelBuilder.Entity("ClanResponsibility", b =>
                {
                    b.Property<long>("ClansClanId")
                        .HasColumnType("bigint")
                        .HasColumnName("clans_clan_id");

                    b.Property<long>("ResponsibilitiesResponsibilityId")
                        .HasColumnType("bigint")
                        .HasColumnName("responsibilities_responsibility_id");

                    b.HasKey("ClansClanId", "ResponsibilitiesResponsibilityId")
                        .HasName("pk_clan_responsibility");

                    b.HasIndex("ResponsibilitiesResponsibilityId")
                        .HasDatabaseName("ix_clan_responsibility_responsibilities_responsibility_id");

                    b.ToTable("clan_responsibility");
                });

            modelBuilder.Entity("KingdomApi.Models.Clan", b =>
                {
                    b.Property<long>("ClanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("clan_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("ClanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("clan_name");

                    b.Property<string>("ClanPurpose")
                        .HasColumnType("text")
                        .HasColumnName("clan_purpose");

                    b.Property<long>("KingdomId")
                        .HasColumnType("bigint")
                        .HasColumnName("kingdom_id");

                    b.HasKey("ClanId")
                        .HasName("pk_clans");

                    b.HasIndex("KingdomId")
                        .HasDatabaseName("ix_clans_kingdom_id");

                    b.ToTable("clans");
                });

            modelBuilder.Entity("KingdomApi.Models.Kingdom", b =>
                {
                    b.Property<long>("KingdomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("kingdom_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("KingdomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kingdom_name");

                    b.HasKey("KingdomId")
                        .HasName("pk_kingdoms");

                    b.ToTable("kingdoms");
                });

            modelBuilder.Entity("KingdomApi.Models.Nobleman", b =>
                {
                    b.Property<long>("NoblemanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("nobleman_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Department")
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text")
                        .HasColumnName("employee_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(24)")
                        .HasColumnName("gender");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<long>("KingdomId")
                        .HasColumnType("bigint")
                        .HasColumnName("kingdom_id");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text")
                        .HasColumnName("organization_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<long>("PostalCode")
                        .HasColumnType("bigint")
                        .HasColumnName("postal_code");

                    b.Property<string>("ReportingManager")
                        .HasColumnType("text")
                        .HasColumnName("reporting_manager");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("NoblemanId")
                        .HasName("pk_noblemen");

                    b.HasIndex("KingdomId")
                        .HasDatabaseName("ix_noblemen_kingdom_id");

                    b.ToTable("noblemen");
                });

            modelBuilder.Entity("KingdomApi.Models.Responsibility", b =>
                {
                    b.Property<long>("ResponsibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("responsibility_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("action");

                    b.Property<string>("ActionLevel")
                        .IsRequired()
                        .HasColumnType("varchar(24)")
                        .HasColumnName("action_level");

                    b.Property<long>("KingdomId")
                        .HasColumnType("bigint")
                        .HasColumnName("kingdom_id");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("resource_name");

                    b.Property<string>("ResponsibilityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("responsibility_name");

                    b.HasKey("ResponsibilityId")
                        .HasName("pk_responsibilities");

                    b.HasIndex("KingdomId")
                        .HasDatabaseName("ix_responsibilities_kingdom_id");

                    b.ToTable("responsibilities");
                });

            modelBuilder.Entity("NoblemanResponsibility", b =>
                {
                    b.Property<long>("NoblemenNoblemanId")
                        .HasColumnType("bigint")
                        .HasColumnName("noblemen_nobleman_id");

                    b.Property<long>("ResponsibilitiesResponsibilityId")
                        .HasColumnType("bigint")
                        .HasColumnName("responsibilities_responsibility_id");

                    b.HasKey("NoblemenNoblemanId", "ResponsibilitiesResponsibilityId")
                        .HasName("pk_nobleman_responsibility");

                    b.HasIndex("ResponsibilitiesResponsibilityId")
                        .HasDatabaseName("ix_nobleman_responsibility_responsibilities_responsibility_id");

                    b.ToTable("nobleman_responsibility");
                });

            modelBuilder.Entity("ClanNobleman", b =>
                {
                    b.HasOne("KingdomApi.Models.Clan", null)
                        .WithMany()
                        .HasForeignKey("ClansClanId")
                        .HasConstraintName("fk_clan_nobleman_clans_clans_clan_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KingdomApi.Models.Nobleman", null)
                        .WithMany()
                        .HasForeignKey("NoblemenNoblemanId")
                        .HasConstraintName("fk_clan_nobleman_noblemen_noblemen_nobleman_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClanResponsibility", b =>
                {
                    b.HasOne("KingdomApi.Models.Clan", null)
                        .WithMany()
                        .HasForeignKey("ClansClanId")
                        .HasConstraintName("fk_clan_responsibility_clans_clans_clan_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KingdomApi.Models.Responsibility", null)
                        .WithMany()
                        .HasForeignKey("ResponsibilitiesResponsibilityId")
                        .HasConstraintName("fk_clan_responsibility_responsibilities_responsibilities_respo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KingdomApi.Models.Clan", b =>
                {
                    b.HasOne("KingdomApi.Models.Kingdom", "Kingdom")
                        .WithMany("Clans")
                        .HasForeignKey("KingdomId")
                        .HasConstraintName("fk_clans_kingdoms_kingdom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kingdom");
                });

            modelBuilder.Entity("KingdomApi.Models.Nobleman", b =>
                {
                    b.HasOne("KingdomApi.Models.Kingdom", "Kingdom")
                        .WithMany("Noblemen")
                        .HasForeignKey("KingdomId")
                        .HasConstraintName("fk_noblemen_kingdoms_kingdom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kingdom");
                });

            modelBuilder.Entity("KingdomApi.Models.Responsibility", b =>
                {
                    b.HasOne("KingdomApi.Models.Kingdom", "Kingdom")
                        .WithMany("Responsibilities")
                        .HasForeignKey("KingdomId")
                        .HasConstraintName("fk_responsibilities_kingdoms_kingdom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kingdom");
                });

            modelBuilder.Entity("NoblemanResponsibility", b =>
                {
                    b.HasOne("KingdomApi.Models.Nobleman", null)
                        .WithMany()
                        .HasForeignKey("NoblemenNoblemanId")
                        .HasConstraintName("fk_nobleman_responsibility_noblemen_noblemen_nobleman_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KingdomApi.Models.Responsibility", null)
                        .WithMany()
                        .HasForeignKey("ResponsibilitiesResponsibilityId")
                        .HasConstraintName("fk_nobleman_responsibility_responsibilities_responsibilities_r")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KingdomApi.Models.Kingdom", b =>
                {
                    b.Navigation("Clans");

                    b.Navigation("Noblemen");

                    b.Navigation("Responsibilities");
                });
#pragma warning restore 612, 618
        }
    }
}
